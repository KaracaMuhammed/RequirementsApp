@page "/requirements"

@using System.Text.Json;
@using MK.RequirementsApp.BlazorUI.Interfaces;
@using MK.RequirementsApp.BlazorUI.Services;
@using MK.RequirementsApp.Domain;

@inject IProductService ProductService;
@inject ICompanyService CompanyService;
@inject IImageService ImageService;

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@* disable zoom in & out *@
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

@* online fonts *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="..." crossorigin="anonymous">


@* horizontal scroll view *@
<link rel="stylesheet" href="https://unpkg.com/simplebar@5.3.0/dist/simplebar.min.css" integrity="..." crossorigin="anonymous">
<script src="https://unpkg.com/simplebar@5.3.0/dist/simplebar.min.js" integrity="..." crossorigin="anonymous"></script>

@* companies list *@
<div class="container mb-2">
    @if (companies != null)
    {
    <div class="row">
        <div class="col-12">
            <div class="simplebar" style="padding: 5px;" data-simplebar>
                <div class="d-flex margin-bottom: 15px;">
                    
                        @foreach (var company in companies)
                        {
                            <div class="card" id="company-button-@company.Id" style="min-width: 200px; margin-right: 10px; margin-bottom: 5px;" @onclick="() => FilterProducts(company.Id)">
                                <div class="card-body">
                                    <h6 class="card-title" style="font-weight: bold;">@company.Name</h6>
                                </div>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
    }
    else
    {
        <p>Loading companies...</p>
    }
</div>


@* products list *@
<div class="product-container">
    @if (products != null)
    {
        @foreach (var product in products?.Where(p => p.Status != Status.Purchased) ?? Enumerable.Empty<Product>())
        {

            

            <div class="product-card card mb-2" style="max-width: 100%; height: 8rem; display: flex; flex-direction: row;">
                <div style="flex: 0 0 8rem; display: none; text-align: center;" class="image-section">
                    @if (!string.IsNullOrEmpty(product.Image))
                    {
                        <img src="data:image/png;base64,@product.Image" class="card-img" alt="Product Image" style="height: 100%;" />
                    }
                    else
                    {
                        <div class="spinner-container d-flex align-items-center justify-content-center" role="status">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                </div>

                <div style="flex: 1;">
                    <div class="card-body">
                        <div style="overflow-x: auto;">
                            <span>
                                <h6 class="card-title" style="font-weight: bold; display: inline;">@product.Name</h6>
                                <p class="card-text" style="display: block; white-space: nowrap;">
                                    @foreach (var company in product.Companies)
                                    {
                                        <span class="badge companies" data-companyid="@company.Id" style="border: 1px solid lightgrey; color: #3d3d3d; margin-left: 2px;">@company.Name</span>
                                    }
                                </p>
                            </span>
                        </div>

                        @if (product.Status == Status.NotPurchased)
                        {
                            <button type="button" class="btn pbutton pbuttonc mt-2" @onclick="() => UpdateProductStatus(product.Id)">
                                Sepete Ekle
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cart" viewBox="0 0 16 16">
                                    <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5M3.102 4l1.313 7h8.17l1.313-7zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4m7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2m7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2"></path>
                                </svg>
                            </button>
                        }

                        @if (product.Status == Status.InProgress)
                        {
                            <button type="button" class="btn pbutton mt-2 btn-outline-danger" @onclick="() => UpdateProductStatus(product.Id)">
                                Kaldır
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"></path>
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"></path>
                                </svg>
                            </button>
                        }

                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading products...</p>
    }
</div>

<a id="hide-button" style="bottom: 75px;" class="btn btn-primary circular-btn hidden" @onclick="() => ToggleVisibility(false)">
    <i class="fas fa-eye-slash"></i>
</a>

<a id="display-button" style="bottom: 75px;" class="btn btn-primary circular-btn" @onclick="() => ToggleVisibility(true)">
    <i class="fas fa-eye" ></i>
</a>

<a class="btn btn-primary circular-btn" @onclick="NavigatePurchased">
    <i class="fas fa-store"></i>
</a>

<script>

    function toggleVisibility(hideImageSection) {
        var imageSections = document.querySelectorAll('.image-section');
        var hideButton = document.getElementById('hide-button');
        var displayButton = document.getElementById('display-button');
        var companies = document.getElementsByClassName('companies');

        selectedCompanyId = hideImageSection ? -1 : selectedCompanyId;

        imageSections.forEach(function (imageSection) {
            imageSection.style.display = hideImageSection ? 'block' : 'none';
        });

        hideButton.classList.toggle('hidden', !hideImageSection);
        displayButton.classList.toggle('hidden', hideImageSection);
    }

</script>

@code {

    [Inject] private NavigationManager NavigationManager { get; set; }
    private List<Product> allProducts { get; set; } // keeping products in cache
    private List<Product> products { get; set; }
    private List<Company> companies { get; set; }
    private List<ImageDTO> images { get; set; }

    private bool imagesLoaded = false;
    private int selectedCompanyId = -1;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProducts();
        allProducts = products;
        companies = await CompanyService.GetAllCompanies();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !imagesLoaded)
        {
            await FetchImages();
            imagesLoaded = true;
            StateHasChanged();
        }
    }

    private async Task UpdateProductStatus(int productId)
    {

        // forced updates through api
        // await ProductService.UpdateProductStatus(productId);
        // products = await ProductService.GetAllProducts();
        // allProducts = products;

        // if (selectedCompanyId != -1)
        //     products = (await ProductService.GetAllProducts()).Where(p => p.Companies.Any(c => c.Id == selectedCompanyId)).ToList();

        var productToUpdate = products.FirstOrDefault(p => p.Id == productId);
        if (productToUpdate != null)
        {
            if (productToUpdate.Status == Status.NotPurchased)
                productToUpdate.Status = Status.InProgress;
            else if (productToUpdate.Status == Status.InProgress)
                productToUpdate.Status = Status.Purchased;
            else productToUpdate.Status = Status.NotPurchased;

            StateHasChanged();
        }

    }

    private async void FilterProducts(int companyId, bool force = false)
    {
        if (selectedCompanyId == companyId)
        {
            products = allProducts;
            selectedCompanyId = -1;
        }
        else
        {
            products = allProducts.Where(p => p.Companies.Any(c => c.Id == companyId)).ToList();
            selectedCompanyId = companyId;
        } 
    }

    public async Task ToggleVisibility(bool hideImageSection)
    {
        await JSRuntime.InvokeVoidAsync("toggleVisibility", hideImageSection);
    }

    private void NavigatePurchased()
    {
        NavigationManager.NavigateTo("/purchased");
    }

    public async Task FetchImages()
    {
        images = await ImageService.GetAllImages();

        foreach (var product in products)
        {
            product.Image = images.FirstOrDefault(i => i.ProductId == product.Id).ProductImage;
        }
    }

}
