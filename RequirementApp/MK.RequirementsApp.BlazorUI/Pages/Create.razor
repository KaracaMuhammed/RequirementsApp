@page "/create"

@using MK.RequirementsApp.BlazorUI.Interfaces;
@using MK.RequirementsApp.Domain;
@using Microsoft.Extensions.FileProviders;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text;

@inject IProductService ProductService;
@inject ICompanyService CompanyService;

@inject IJSRuntime JSRuntime;
@inject HttpClient HttpClient;

@* disable zoom in & out *@
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<link rel="stylesheet" href="https://unpkg.com/simplebar@5.3.0/dist/simplebar.min.css" integrity="..." crossorigin="anonymous">
<script src="https://unpkg.com/simplebar@5.3.0/dist/simplebar.min.js" integrity="..." crossorigin="anonymous"></script>

<h3 class="mt-3">Yeni Ürün Ekle</h3>

<div class="card create-card" style="">
    <div class="card-body">
        <form @onsubmit="CreateProduct">

            <div class="mb-3">
                <label for="productName" class="form-label">İsim *</label>
                <input type="text" class="form-control" id="productName" @bind="product.Name" required />
            </div>

            <div class="mb-3">
                <label for="productStatus" class="form-label">Durum</label>
                <select class="form-select" id="productStatus">
                    <option value="0">Satın Alınmadı</option>
                    <option value="1">Devam Ediyor</option>
                    <option value="2">Satın Alındı</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="imageFile" class="form-label">Resim</label>
                <div class="d-flex align-items-center">
                    <InputFile class="form-control" type="file" id="imageFile" OnChange="HandleImageChange" accept="image/*" />
                    @if (IsLoading)
                    {
                        <div class="spinner-border ms-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
            </div>

            <div class="mb-3" style="max-width: 100%;">
                <label class="form-label">Dükanlar *</label>
                <div class="simplebar" style="max-width: 100%; overflow-x: auto; overflow-y: hidden; white-space: nowrap; display: flex;">
                    @if (companies != null)
                    {
                        @foreach (var company in companies)
                        {
                            <div id="company-button-@company.Id" class="card m-2 text-center" style="min-width: 150px; height: 50px; cursor: pointer; white-space: nowrap; overflow: hidden;" @onclick="() => ToggleCompanySelection(company.Id)">
                                <span class="d-flex align-items-center justify-content-center" style="font-size: 14px; line-height: 1.2; height: 100%;">@company.Name</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Dükanlar yükleniyor...</p>
                    }
                </div>

            </div>

            <button type="submit" class="btn btn-primary">Ürün Oluştur</button>
        </form>
    </div>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="..." crossorigin="anonymous">

<a class="btn btn-primary circular-btn" @onclick="NavigateRequirements">
    <i class="fas fa-shopping-cart"></i>
</a>

<script>
    function toggleFocusState(companyId, isFocused) {
        const element = document.getElementById(`company-button-${companyId}`);

        if (element) {
            if (isFocused) {
                element.classList.add('focused');
            } else {
                element.classList.remove('focused');
            }
        }
    }

    function getSelectedStatus() {
        var selectElement = document.getElementById("productStatus");
        var selectedValue = selectElement.options[selectElement.selectedIndex].value;
        return parseInt(selectedValue, 10);
    }
</script>

@code {
    private ProductDTO product { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    private List<Company> companies { get; set; }
    private List<int> selectedCompanyIds = new List<int>();
    private string base64String;

    protected override async Task OnInitializedAsync()
    {
        product = new ProductDTO();
        companies = await CompanyService.GetAllCompanies();
    }

    private void ToggleCompanySelection(int companyId)
    {
        if (selectedCompanyIds.Contains(companyId)) selectedCompanyIds.Remove(companyId);
        else selectedCompanyIds.Add(companyId);
        JSRuntime.InvokeVoidAsync("toggleFocusState", companyId, selectedCompanyIds.Contains(companyId));
    }

    private async Task CreateProduct()
    {
        product.Image = base64String;
        product.Status = await JSRuntime.InvokeAsync<Status>("getSelectedStatus");
        product.CompaniesIds = selectedCompanyIds;
        await ProductService.CreateProduct(product);
        NavigationManager.NavigateTo("/requirements");
    }

    private bool IsLoading { get; set; }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            IsLoading = true;
            try
            {
                using (var stream = imageFile.OpenReadStream(maxAllowedSize: 15 * 1024 * 1024))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        base64String = Convert.ToBase64String(memoryStream.ToArray());
                    }
                }
            }
            finally
            {
                IsLoading = false;
            }
        }
        else
        {
            base64String = null;
        }
    }


    private void NavigateRequirements()
    {
        NavigationManager.NavigateTo("/requirements");
    }
}